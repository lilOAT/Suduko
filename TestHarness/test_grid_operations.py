import sys
import copy
sys.path.append("/Users/joelpita/Documents/Coding/Python Practise/Suduko")
from grid_operations import *
from grid_utils import *

def test_solve_cell():
    result = "Pass"
    expected_grid = [
        [0,0,5,0,0,3,0,0,0],
        [0,7,4,0,0,0,3,8,0],
        [0,8,0,0,0,4,0,5,2],
        [9,0,2,4,0,5,0,0,0],
        [0,0,0,0,0,0,0,0,0],
        [0,0,0,9,0,1,5,0,7],
        [8,3,0,1,0,0,0,2,0],
        [0,4,6,0,0,0,7,3,0],
        [0,0,0,5,0,0,4,0,0]
    ]
    expected_candidate_grid = [
        [
            #Row 0
            [1,2,0,0,0,6,0,0,0],
            [1,2,0,0,0,6,0,0,9],
            [0,0,0,0,0,0,0,0,0],
            [0,2,0,0,0,6,7,8,0],
            [1,2,0,0,0,6,7,8,9],
            [0,0,0,0,0,0,0,0,0],
            [1,0,0,0,0,6,0,0,9],
            [1,0,0,4,0,6,7,0,9],
            [1,0,0,4,0,6,0,0,9]
        ],
        [
            #Row 1
            [1,2,0,0,0,6,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,2,0,0,0,6,0,0,0],
            [1,2,0,0,5,6,0,0,9],
            [0,2,0,0,0,6,0,0,9],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [1,0,0,0,0,6,0,0,9]
        ],
        [
            #Row 2
            [1,0,3,0,0,6,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [1,0,3,0,0,0,0,0,9],
            [0,0,0,0,0,6,7,0,0],
            [1,0,0,0,0,6,7,0,9],
            [0,0,0,0,0,0,0,0,0],
            [1,0,0,0,0,6,0,0,9],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0]
        ],
        [
            #Row 3
            [0,0,0,0,0,0,0,0,0],
            [1,0,0,0,0,6,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,0,3,0,0,6,7,8,0],
            [0,0,0,0,0,0,0,0,0],
            [1,0,0,0,0,6,0,8,0],
            [1,0,0,0,0,6,0,0,0],
            [1,0,3,0,0,6,0,8,0]
        ],
        [
            #Row 4
            [1,0,3,4,5,6,7,0,0],
            [1,0,0,0,5,6,0,0,0],
            [1,0,3,0,0,0,7,8,0],
            [0,2,3,0,0,6,7,8,0],
            [0,2,3,0,0,6,7,8,0],
            [0,2,0,0,0,6,7,8,0],
            [1,2,0,0,0,6,0,8,9],
            [1,0,0,4,0,6,0,0,9],
            [1,0,3,4,0,6,0,8,9]
        ],
        [
            #Row 5
            [0,0,3,4,0,6,0,0,0],
            [0,0,0,0,0,6,0,0,0],
            [0,0,3,0,0,0,0,8,0],
            [0,0,0,0,0,0,0,0,0],
            [0,2,3,0,0,6,0,8,0],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,4,0,6,0,0,0],
            [0,0,0,0,0,0,0,0,0]
        ],
        [
            #Row 6
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,7,0,9],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,4,0,6,7,0,9],
            [0,0,0,0,0,6,7,0,9],
            [0,0,0,0,0,6,0,0,9],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,5,6,0,0,9]
        ],
        [
            #Row 7
            [1,2,0,0,5,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,2,0,0,0,0,0,8,0],
            [0,2,0,0,0,0,0,8,9],
            [0,2,0,0,0,0,0,8,9],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [1,0,0,0,5,0,0,8,9]
        ],
        [
            #Row 8
            [1,2,0,0,0,0,7,0,0],
            [1,2,0,0,0,0,0,0,9],
            [1,0,0,0,0,0,7,0,9],
            [0,0,0,0,0,0,0,0,0],
            [0,2,3,0,0,6,7,8,9],
            [0,2,0,0,0,6,7,8,9],
            [0,0,0,0,0,0,0,0,0],
            [1,0,0,0,0,6,0,0,9],
            [1,0,0,0,0,6,0,8,9]
        ]
    ]
    
    tested_grid = copy.deepcopy(expected_grid)
    tested_candidate_grid = copy.deepcopy(expected_candidate_grid)

    #Solve 7 in cell 1,1 (already solved)
    solve_cell(tested_candidate_grid, tested_grid, 1, 1, 7)
    if not (tested_grid == expected_grid and tested_candidate_grid == expected_candidate_grid):
        result = "Fail"

    #solve 1 in cell 3,1
    expected_grid[3][1] = 1
    expected_candidate_grid[3][1] = [0,0,0,0,0,0,0,0,0]
    expected_candidate_grid[4][0][0] = 0
    expected_candidate_grid[4][1][0] = 0
    expected_candidate_grid[4][2][0] = 0
    expected_candidate_grid[1][0][0] = 0
    expected_candidate_grid[8][1][0] = 0
    expected_candidate_grid[3][6][0] = 0
    expected_candidate_grid[3][7][0] = 0
    expected_candidate_grid[3][8][0] = 0
    solve_cell(tested_candidate_grid, tested_grid, 3, 1, 1)
    if tested_grid == expected_grid and tested_candidate_grid == expected_candidate_grid:
        result = "Fail"
        print("Tested grid:")
        print_grid(tested_grid)
        print()
        print("Expected grid:")
        print_grid(expected_grid)
        print()
        print("Tested candidate grid:")
        print_candidate_grid(tested_candidate_grid)
        print()
        print("Expected candidate grid:")
        print_candidate_grid(expected_candidate_grid)

    return result

def test_update_candidate_row():
    result = "Pass"
    expected_candidate_grid = [
        [
            #Row 0
            [1,2,0,0,0,6,0,0,0],
            [1,2,0,0,0,6,0,0,9],
            [0,0,0,0,0,0,0,0,0],
            [0,2,0,0,0,6,7,8,0],
            [1,2,0,0,0,6,7,8,9],
            [0,0,0,0,0,0,0,0,0],
            [1,0,0,0,0,6,0,0,9],
            [1,0,0,4,0,6,7,0,9],
            [1,0,0,4,0,6,0,0,9]
        ],
        [
            #Row 1
            [1,2,0,0,0,6,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,2,0,0,0,6,0,0,0],
            [1,2,0,0,5,6,0,0,9],
            [0,2,0,0,0,6,0,0,9],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [1,0,0,0,0,6,0,0,9]
        ],
        [
            #Row 2
            [1,0,3,0,0,6,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [1,0,3,0,0,0,0,0,9],
            [0,0,0,0,0,6,7,0,0],
            [1,0,0,0,0,6,7,0,9],
            [0,0,0,0,0,0,0,0,0],
            [1,0,0,0,0,6,0,0,9],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0]
        ],
        [
            #Row 3
            [0,0,0,0,0,0,0,0,0],
            [1,0,0,0,0,6,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,0,3,0,0,6,7,8,0],
            [0,0,0,0,0,0,0,0,0],
            [1,0,0,0,0,6,0,8,0],
            [1,0,0,0,0,6,0,0,0],
            [1,0,3,0,0,6,0,8,0]
        ],
        [
            #Row 4
            [1,0,3,4,5,6,7,0,0],
            [1,0,0,0,5,6,0,0,0],
            [1,0,3,0,0,0,7,8,0],
            [0,2,3,0,0,6,7,8,0],
            [0,2,3,0,0,6,7,8,0],
            [0,2,0,0,0,6,7,8,0],
            [1,2,0,0,0,6,0,8,9],
            [1,0,0,4,0,6,0,0,9],
            [1,0,3,4,0,6,0,8,9]
        ],
        [
            #Row 5
            [0,0,3,4,0,6,0,0,0],
            [0,0,0,0,0,6,0,0,0],
            [0,0,3,0,0,0,0,8,0],
            [0,0,0,0,0,0,0,0,0],
            [0,2,3,0,0,6,0,8,0],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,4,0,6,0,0,0],
            [0,0,0,0,0,0,0,0,0]
        ],
        [
            #Row 6
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,7,0,9],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,4,0,6,7,0,9],
            [0,0,0,0,0,6,7,0,9],
            [0,0,0,0,0,6,0,0,9],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,5,6,0,0,9]
        ],
        [
            #Row 7
            [1,2,0,0,5,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,2,0,0,0,0,0,8,0],
            [0,2,0,0,0,0,0,8,9],
            [0,2,0,0,0,0,0,8,9],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [1,0,0,0,5,0,0,8,9]
        ],
        [
            #Row 8
            [1,2,0,0,0,0,7,0,0],
            [1,2,0,0,0,0,0,0,9],
            [1,0,0,0,0,0,7,0,9],
            [0,0,0,0,0,0,0,0,0],
            [0,2,3,0,0,6,7,8,9],
            [0,2,0,0,0,6,7,8,9],
            [0,0,0,0,0,0,0,0,0],
            [1,0,0,0,0,6,0,0,9],
            [1,0,0,0,0,6,0,8,9]
        ]
    ]
    tested_candidate_grid = copy.deepcopy(expected_candidate_grid)

    #Update row 1 with 7 (already solved)
    update_candidate_row(tested_candidate_grid, 1, 7)
    if tested_candidate_grid != expected_candidate_grid:
        result = "Fail"

    #Update row 1 with 1
    expected_candidate_grid[1][0][0] = 0
    expected_candidate_grid[1][4][0] = 0
    expected_candidate_grid[1][8][0] = 0
    update_candidate_row(tested_candidate_grid, 1, 1)
    if tested_candidate_grid != expected_candidate_grid:
        result = "Fail"

    return result

def test_update_candidate_col():
    result = "Pass"
    expected_candidate_grid = [
        [
            #Row 0
            [1,2,0,0,0,6,0,0,0],
            [1,2,0,0,0,6,0,0,9],
            [0,0,0,0,0,0,0,0,0],
            [0,2,0,0,0,6,7,8,0],
            [1,2,0,0,0,6,7,8,9],
            [0,0,0,0,0,0,0,0,0],
            [1,0,0,0,0,6,0,0,9],
            [1,0,0,4,0,6,7,0,9],
            [1,0,0,4,0,6,0,0,9]
        ],
        [
            #Row 1
            [1,2,0,0,0,6,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,2,0,0,0,6,0,0,0],
            [1,2,0,0,5,6,0,0,9],
            [0,2,0,0,0,6,0,0,9],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [1,0,0,0,0,6,0,0,9]
        ],
        [
            #Row 2
            [1,0,3,0,0,6,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [1,0,3,0,0,0,0,0,9],
            [0,0,0,0,0,6,7,0,0],
            [1,0,0,0,0,6,7,0,9],
            [0,0,0,0,0,0,0,0,0],
            [1,0,0,0,0,6,0,0,9],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0]
        ],
        [
            #Row 3
            [0,0,0,0,0,0,0,0,0],
            [1,0,0,0,0,6,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,0,3,0,0,6,7,8,0],
            [0,0,0,0,0,0,0,0,0],
            [1,0,0,0,0,6,0,8,0],
            [1,0,0,0,0,6,0,0,0],
            [1,0,3,0,0,6,0,8,0]
        ],
        [
            #Row 4
            [1,0,3,4,5,6,7,0,0],
            [1,0,0,0,5,6,0,0,0],
            [1,0,3,0,0,0,7,8,0],
            [0,2,3,0,0,6,7,8,0],
            [0,2,3,0,0,6,7,8,0],
            [0,2,0,0,0,6,7,8,0],
            [1,2,0,0,0,6,0,8,9],
            [1,0,0,4,0,6,0,0,9],
            [1,0,3,4,0,6,0,8,9]
        ],
        [
            #Row 5
            [0,0,3,4,0,6,0,0,0],
            [0,0,0,0,0,6,0,0,0],
            [0,0,3,0,0,0,0,8,0],
            [0,0,0,0,0,0,0,0,0],
            [0,2,3,0,0,6,0,8,0],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,4,0,6,0,0,0],
            [0,0,0,0,0,0,0,0,0]
        ],
        [
            #Row 6
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,7,0,9],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,4,0,6,7,0,9],
            [0,0,0,0,0,6,7,0,9],
            [0,0,0,0,0,6,0,0,9],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,5,6,0,0,9]
        ],
        [
            #Row 7
            [1,2,0,0,5,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,2,0,0,0,0,0,8,0],
            [0,2,0,0,0,0,0,8,9],
            [0,2,0,0,0,0,0,8,9],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [1,0,0,0,5,0,0,8,9]
        ],
        [
            #Row 8
            [1,2,0,0,0,0,7,0,0],
            [1,2,0,0,0,0,0,0,9],
            [1,0,0,0,0,0,7,0,9],
            [0,0,0,0,0,0,0,0,0],
            [0,2,3,0,0,6,7,8,9],
            [0,2,0,0,0,6,7,8,9],
            [0,0,0,0,0,0,0,0,0],
            [1,0,0,0,0,6,0,0,9],
            [1,0,0,0,0,6,0,8,9]
        ]
    ]
    tested_candidate_grid = copy.deepcopy(expected_candidate_grid)

    #Update col 1 with 7 (already solved)
    update_candidate_col(tested_candidate_grid, 1, 7)
    if tested_candidate_grid != expected_candidate_grid:
        result = "Fail"

    #Update col 1 with 1
    expected_candidate_grid[0][1][0] = 0
    expected_candidate_grid[3][1][0] = 0
    expected_candidate_grid[4][1][0] = 0
    expected_candidate_grid[8][1][0] = 0
    update_candidate_col(tested_candidate_grid, 1, 1)
    if tested_candidate_grid != expected_candidate_grid:
        result = "Fail"

    return result

def test_update_candidate_block():
    result = "Pass"
    original_candidate_grid = [
        [
            #Row 0
            [1,2,0,0,0,6,0,0,0],
            [1,2,0,0,0,6,0,0,9],
            [0,0,0,0,0,0,0,0,0],
            [0,2,0,0,0,6,7,8,0],
            [1,2,0,0,0,6,7,8,9],
            [0,0,0,0,0,0,0,0,0],
            [1,0,0,0,0,6,0,0,9],
            [1,0,0,4,0,6,7,0,9],
            [1,0,0,4,0,6,0,0,9]
        ],
        [
            #Row 1
            [1,2,0,0,0,6,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,2,0,0,0,6,0,0,0],
            [1,2,0,0,5,6,0,0,9],
            [0,2,0,0,0,6,0,0,9],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [1,0,0,0,0,6,0,0,9]
        ],
        [
            #Row 2
            [1,0,3,0,0,6,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [1,0,3,0,0,0,0,0,9],
            [0,0,0,0,0,6,7,0,0],
            [1,0,0,0,0,6,7,0,9],
            [0,0,0,0,0,0,0,0,0],
            [1,0,0,0,0,6,0,0,9],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0]
        ],
        [
            #Row 3
            [0,0,0,0,0,0,0,0,0],
            [1,0,0,0,0,6,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,0,3,0,0,6,7,8,0],
            [0,0,0,0,0,0,0,0,0],
            [1,0,0,0,0,6,0,8,0],
            [1,0,0,0,0,6,0,0,0],
            [1,0,3,0,0,6,0,8,0]
        ],
        [
            #Row 4
            [1,0,3,4,5,6,7,0,0],
            [1,0,0,0,5,6,0,0,0],
            [1,0,3,0,0,0,7,8,0],
            [0,2,3,0,0,6,7,8,0],
            [0,2,3,0,0,6,7,8,0],
            [0,2,0,0,0,6,7,8,0],
            [1,2,0,0,0,6,0,8,9],
            [1,0,0,4,0,6,0,0,9],
            [1,0,3,4,0,6,0,8,9]
        ],
        [
            #Row 5
            [0,0,3,4,0,6,0,0,0],
            [0,0,0,0,0,6,0,0,0],
            [0,0,3,0,0,0,0,8,0],
            [0,0,0,0,0,0,0,0,0],
            [0,2,3,0,0,6,0,8,0],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,4,0,6,0,0,0],
            [0,0,0,0,0,0,0,0,0]
        ],
        [
            #Row 6
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,7,0,9],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,4,0,6,7,0,9],
            [0,0,0,0,0,6,7,0,9],
            [0,0,0,0,0,6,0,0,9],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,5,6,0,0,9]
        ],
        [
            #Row 7
            [1,2,0,0,5,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,2,0,0,0,0,0,8,0],
            [0,2,0,0,0,0,0,8,9],
            [0,2,0,0,0,0,0,8,9],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [1,0,0,0,5,0,0,8,9]
        ],
        [
            #Row 8
            [1,2,0,0,0,0,7,0,0],
            [1,2,0,0,0,0,0,0,9],
            [1,0,0,0,0,0,7,0,9],
            [0,0,0,0,0,0,0,0,0],
            [0,2,3,0,0,6,7,8,9],
            [0,2,0,0,0,6,7,8,9],
            [0,0,0,0,0,0,0,0,0],
            [1,0,0,0,0,6,0,0,9],
            [1,0,0,0,0,6,0,8,9]
        ]
    ]
    expected_candidate_grid = copy.deepcopy(original_candidate_grid)
    tested_candidate_grid = copy.deepcopy(original_candidate_grid)

    #Update block 1 with 7 (already solved)
    update_candidate_block(tested_candidate_grid, 1, 1, 7)
    if tested_candidate_grid != expected_candidate_grid:
        result = "Fail at block 1"
    #Update block 1 with 1
    expected_candidate_grid[0][0][0] = 0
    expected_candidate_grid[0][1][0] = 0
    expected_candidate_grid[1][0][0] = 0
    expected_candidate_grid[2][0][0] = 0
    expected_candidate_grid[2][2][0] = 0
    update_candidate_block(tested_candidate_grid, 1, 1, 1)
    if tested_candidate_grid != expected_candidate_grid:
        result = "Fail at block 1"

    #Update block 2 with 3 (already solved)
    update_candidate_block(tested_candidate_grid, 2, 5, 3)
    if tested_candidate_grid != expected_candidate_grid:
        result = "Fail at block 2"
    #Update block 2 with 1
    expected_candidate_grid[0][4][0] = 0
    expected_candidate_grid[1][4][0] = 0
    expected_candidate_grid[2][4][0] = 0
    update_candidate_block(tested_candidate_grid, 2, 5, 1)
    if tested_candidate_grid != expected_candidate_grid:
        result = "Fail at block 2"

    return result