import sys
import os
sys.path.append("/Users/joelpita/Documents/Coding/Python Practise/Suduko")
from grid_utils import *

#UTILS
def read_csv(file_path):
    with open(file_path, 'r') as file:
        reader = csv.reader(file)
        return list(reader)



def test_import_grid():
    result = "Pass"
    grid_expected = []
    grid_tested = []

    grid_expected = [
        [0,0,5,0,0,3,0,0,0],
        [0,7,4,0,0,0,3,8,0],
        [0,8,0,0,0,4,0,5,2],
        [9,0,2,4,0,5,0,0,0],
        [0,0,0,0,0,0,0,0,0],
        [0,0,0,9,0,1,5,0,7],
        [8,3,0,1,0,0,0,2,0],
        [0,4,6,0,0,0,7,3,0],
        [0,0,0,5,0,0,4,0,0]
    ]
    grid_tested = import_grid("Grids/Grid_100.csv")
    if not grid_tested == grid_expected:
        result = "Fail"

    return result

def test_export_grid():
    result = "Pass"

    grid_tested = [
        [0,0,5,0,0,3,0,0,0],
        [0,7,4,0,0,0,3,8,0],
        [0,8,0,0,0,4,0,5,2],
        [9,0,2,4,0,5,0,0,0],
        [0,0,0,0,0,0,0,0,0],
        [0,0,0,9,0,1,5,0,7],
        [8,3,0,1,0,0,0,2,0],
        [0,4,6,0,0,0,7,3,0],
        [0,0,0,5,0,0,4,0,0]
    ]
    export_grid(grid_tested, "export_test.csv")
    csv_expected = read_csv("Grids/Grid_100.csv")
    csv_tested = read_csv("export_test.csv")
    os.remove("export_test.csv")

    if not csv_expected == csv_tested:
        result = "Fail"
    return result

def test_initialise_candidate_grid():
    result = "Pass"
    expected_candidate_grid = [
        [
            #Row 0
            [1,2,0,0,0,6,0,0,0],
            [1,2,0,0,0,6,0,0,9],
            [0,0,0,0,0,0,0,0,0],
            [0,2,0,0,0,6,7,8,0],
            [1,2,0,0,0,6,7,8,9],
            [0,0,0,0,0,0,0,0,0],
            [1,0,0,0,0,6,0,0,9],
            [1,0,0,4,0,6,7,0,9],
            [1,0,0,4,0,6,0,0,9]
        ],
        [
            #Row 1
            [1,2,0,0,0,6,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,2,0,0,0,6,0,0,0],
            [1,2,0,0,5,6,0,0,9],
            [0,2,0,0,0,6,0,0,9],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [1,0,0,0,0,6,0,0,9]
        ],
        [
            #Row 2
            [1,0,3,0,0,6,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [1,0,3,0,0,0,0,0,9],
            [0,0,0,0,0,6,7,0,0],
            [1,0,0,0,0,6,7,0,9],
            [0,0,0,0,0,0,0,0,0],
            [1,0,0,0,0,6,0,0,9],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0]
        ],
        [
            #Row 3
            [0,0,0,0,0,0,0,0,0],
            [1,0,0,0,0,6,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,0,3,0,0,6,7,8,0],
            [0,0,0,0,0,0,0,0,0],
            [1,0,0,0,0,6,0,8,0],
            [1,0,0,0,0,6,0,0,0],
            [1,0,3,0,0,6,0,8,0]
        ],
        [
            #Row 4
            [1,0,3,4,5,6,7,0,0],
            [1,0,0,0,5,6,0,0,0],
            [1,0,3,0,0,0,7,8,0],
            [0,2,3,0,0,6,7,8,0],
            [0,2,3,0,0,6,7,8,0],
            [0,2,0,0,0,6,7,8,0],
            [1,2,0,0,0,6,0,8,9],
            [1,0,0,4,0,6,0,0,9],
            [1,0,3,4,0,6,0,8,9]
        ],
        [
            #Row 5
            [0,0,3,4,0,6,0,0,0],
            [0,0,0,0,0,6,0,0,0],
            [0,0,3,0,0,0,0,8,0],
            [0,0,0,0,0,0,0,0,0],
            [0,2,3,0,0,6,0,8,0],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,4,0,6,0,0,0],
            [0,0,0,0,0,0,0,0,0]
        ],
        [
            #Row 6
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,7,0,9],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,4,0,6,7,0,9],
            [0,0,0,0,0,6,7,0,9],
            [0,0,0,0,0,6,0,0,9],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,5,6,0,0,9]
        ],
        [
            #Row 7
            [1,2,0,0,5,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,2,0,0,0,0,0,8,0],
            [0,2,0,0,0,0,0,8,9],
            [0,2,0,0,0,0,0,8,9],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [1,0,0,0,5,0,0,8,9]
        ],
        [
            #Row 8
            [1,2,0,0,0,0,7,0,0],
            [1,2,0,0,0,0,0,0,9],
            [1,0,0,0,0,0,7,0,9],
            [0,0,0,0,0,0,0,0,0],
            [0,2,3,0,0,6,7,8,9],
            [0,2,0,0,0,6,7,8,9],
            [0,0,0,0,0,0,0,0,0],
            [1,0,0,0,0,6,0,0,9],
            [1,0,0,0,0,6,0,8,9]
        ]
    ]
    grid_tested = [
        [0,0,5,0,0,3,0,0,0],
        [0,7,4,0,0,0,3,8,0],
        [0,8,0,0,0,4,0,5,2],
        [9,0,2,4,0,5,0,0,0],
        [0,0,0,0,0,0,0,0,0],
        [0,0,0,9,0,1,5,0,7],
        [8,3,0,1,0,0,0,2,0],
        [0,4,6,0,0,0,7,3,0],
        [0,0,0,5,0,0,4,0,0]
    ]

    tested_candidate_grid = create_candidate_grid()
    initialise_candidate_grid(grid_tested,tested_candidate_grid)
    if not tested_candidate_grid == expected_candidate_grid:
        result = "Fail"
        """
        print("        Expected candidate grid:")
        print_candidate_grid(expected_candidate_grid)
        print()
        print("        Tested candidate grid:")
        print_candidate_grid(tested_candidate_grid)
        """
    return result

def test_is_number_in_block():
    result = "Pass"
    grid_tested = [
        [0,0,5,0,0,3,0,0,0],
        [0,7,4,0,0,0,3,8,0],
        [0,8,0,0,0,4,0,5,2],
        [9,0,2,4,0,5,0,0,0],
        [0,0,0,0,0,0,0,0,0],
        [0,0,0,9,0,1,5,0,7],
        [8,3,0,1,0,0,0,2,0],
        [0,4,6,0,0,0,7,3,0],
        [0,0,0,5,0,0,4,0,0]
    ]
    if not is_number_in_block(1, 4, 4, grid_tested):
        result = "Fail"
    if is_number_in_block(2, 4, 4, grid_tested):
        result = "Fail"

    return result

def test_is_number_in_row():
    result = "Pass"
    grid_tested = [
        [0,0,5,0,0,3,0,0,0],
        [0,7,4,0,0,0,3,8,0],
        [0,8,0,0,0,4,0,5,2],
        [9,0,2,4,0,5,0,0,0],
        [0,0,0,0,0,0,0,0,0],
        [0,0,0,9,0,1,5,0,7],
        [8,3,0,1,0,0,0,2,0],
        [0,4,6,0,0,0,7,3,0],
        [0,0,0,5,0,0,4,0,0]
    ]
    if not is_number_in_row(2, 3, grid_tested):
        result = "Fail"
    if is_number_in_row(1, 3, grid_tested):
        result = "Fail"

    return result

def test_is_number_in_col():
    result = "Pass"
    grid_tested = [
        [0,0,5,0,0,3,0,0,0],
        [0,7,4,0,0,0,3,8,0],
        [0,8,0,0,0,4,0,5,2],
        [9,0,2,4,0,5,0,0,0],
        [0,0,0,0,0,0,0,0,0],
        [0,0,0,9,0,1,5,0,7],
        [8,3,0,1,0,0,0,2,0],
        [0,4,6,0,0,0,7,3,0],
        [0,0,0,5,0,0,4,0,0]
    ]
    if not is_number_in_col(1, 3, grid_tested):
        result = "Fail"
    if is_number_in_col(2, 3, grid_tested):
        result = "Fail"

    return result

